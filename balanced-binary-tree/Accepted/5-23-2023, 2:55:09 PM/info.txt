{"id":955789268,"lang":"typescript","lang_name":"TypeScript","time":"5Â months","timestamp":1684846509,"status":10,"status_display":"Accepted","runtime":"86 ms","url":"/submissions/detail/955789268/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"50 MB","code":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction isBalanced(root: TreeNode | null): boolean {\n    function height(root: TreeNode | null): number {\n        let result = root === null ? 0 : 1+Math.max(height(root.left), height(root.right));\n        //console.log(\"height\", root, result);\n        return result\n    }\n\n    function balance(root: TreeNode | null): number {\n        let result = root === null ? 0 : height(root.left) - height(root.right);\n        //console.log(\"balance\", root, result);\n        return result\n    }\n    let bf: number;\n    return (bf = balance(root), bf >= -1 && bf <= 1 && (root == null || (isBalanced(root.left) && isBalanced(root.right) ) ) );\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}