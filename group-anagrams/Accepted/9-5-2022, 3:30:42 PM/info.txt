{"id":792120608,"lang":"typescript","lang_name":"TypeScript","time":"1 year, 1 month","timestamp":1662384642,"status":10,"status_display":"Accepted","runtime":"182 ms","url":"/submissions/detail/792120608/","is_pending":"Not Pending","title":"Group Anagrams","memory":"53.9 MB","code":"function toMultiset(s: string): Map<string, number> {\n    const s_mset: Map<string, number> = new Map();\n    for(let char of s) {\n        if(s_mset.has(char)) {\n            s_mset.set(char, s_mset.get(char)+1);\n        }else{\n            s_mset.set(char, 1);\n        }\n    }\n    return s_mset;\n}\n\nfunction msetEqual(s: Map<string, number>, t: Map<string, number>): boolean {\n    \n    for(let [lchar,] of s) {\n        if(!(s.get(lchar) === t.get(lchar))) {\n            return false;\n        }\n    }\n    \n    for(let [rchar,] of t) {\n        if(!(s.get(rchar) === t.get(rchar))) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nfunction toCanonical(s: string): string {\n    return s.split(\"\").sort().join(\"\");\n}\n\nfunction groupAnagrams(strs: string[]): string[][] {\n    const anagrams: Map<string, string[]> = new Map(); \n    for(let word of strs) {\n        let canon = toCanonical(word);\n        if(anagrams.has(canon)) {\n            anagrams.set(canon, anagrams.get(canon).concat([word]));\n        }else{\n            anagrams.set(canon, [word])\n        }\n    }\n    let result = [];\n    for(let [canon, wordlist] of anagrams) {\n        result.push(wordlist);\n    }\n    return result;\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams","has_notes":false,"flag_type":1}