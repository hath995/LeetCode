{"id":569383449,"lang":"typescript","lang_name":"TypeScript","time":"2Â years","timestamp":1633950362,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/569383449/","is_pending":"Not Pending","title":"Diameter of Binary Tree","memory":"43.5 MB","code":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\nfunction diameter(node: TreeNode | null): [number, number] {\n  if(node == null) {\n    return [-1,-1];\n  }\n  if(node.left == null && node.right == null) {\n    return [0, 0];\n  }\n  let leftDiameter = diameter(node.left);\n  let rightDiameter = diameter(node.right);\n  let height = Math.max(leftDiameter[0],rightDiameter[0]) + 1;\n  let dim = leftDiameter[0]+rightDiameter[0]+2;\n  let maxDiameter = Math.max(leftDiameter[1], rightDiameter[1], dim);\n  return [height, maxDiameter];\n}\n\nfunction diameterOfBinaryTree(root: TreeNode | null): number {\n  return diameter(root)[1];\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"diameter-of-binary-tree","has_notes":false,"flag_type":1}