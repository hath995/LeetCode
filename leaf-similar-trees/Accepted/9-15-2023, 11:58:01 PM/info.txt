{"id":1050448884,"lang":"typescript","lang_name":"TypeScript","time":"1 month, 1 week","timestamp":1694815081,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/1050448884/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"45.9 MB","code":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction *leafs(root: TreeNode | null): IterableIterator<number> {\n    if(root === null) return null;\n    if(root.left === null && root.right === null) yield root.val;\n    yield * leafs(root.left);\n    yield * leafs(root.right);\n}\n\nfunction leafSimilar(root1: TreeNode | null, root2: TreeNode | null): boolean {\n//    let l1 = leafs(root1);\n//    let l2 = leafs(root2);\n//    let left, right;\n//    while((left = l1.next(), right = l2.next(), left.value == right.value && left.done !== true && right.done !== true )) {}\n//    return left.value === right.value && left.done === right.done;\n\n   let l1 = leafs(root1);\n   let l2 = leafs(root2);\n   let left = l1.next(), right = l2.next();\n   while(!left.done  || !right.done) {\n       if(left.value !== right.value) {\n           return false;\n       }\n       left = l1.next();\n       right = l2.next();\n   }\n   return true\n};","compare_result":"111111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}