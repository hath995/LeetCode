{"id":841030167,"lang":"typescript","lang_name":"TypeScript","time":"11 months, 2 weeks","timestamp":1668122892,"status":10,"status_display":"Accepted","runtime":"181 ms","url":"/submissions/detail/841030167/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"100.8 MB","code":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction buildTree(inorder: number[], postorder: number[]): TreeNode | null {\n    if(inorder.length == 0) return null;\n    \n    let root = new TreeNode(postorder.pop());\n    let center = inorder.indexOf(root.val);\n    \n    root.right = buildTree(inorder.slice(center+1), postorder);\n    root.left = buildTree(inorder.slice(0,center), postorder)\n    \n    return root;\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}