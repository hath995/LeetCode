{"id":732517791,"lang":"typescript","lang_name":"TypeScript","time":"1 year, 3 months","timestamp":1656329773,"status":10,"status_display":"Accepted","runtime":"385 ms","url":"/submissions/detail/732517791/","is_pending":"Not Pending","title":"Minimum Depth of Binary Tree","memory":"99.8 MB","code":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\nfunction boundedMin(a,b) {\n    if (a == 0) return b;\n    if (b == 0) return a;\n    return Math.min(a,b);\n}\n\nfunction minDepth(root: TreeNode | null): number {\n    if(root == null) return 0;\n    if(root.left == null && root.right == null) {\n        return 1;\n    }\n    return boundedMin(minDepth(root.left), minDepth(root.right))+1;\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"minimum-depth-of-binary-tree","has_notes":false,"flag_type":1}