{"id":1014660360,"lang":"typescript","lang_name":"TypeScript","time":"2 months, 2 weeks","timestamp":1691410897,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/1014660360/","is_pending":"Not Pending","title":"Symmetric Tree","memory":"45.1 MB","code":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\nfunction isSymmetricHelper(left: TreeNode | null, right: TreeNode | null): boolean {\n    if ( left === null && right === null) return true\n    return left !== null && right !== null && left.val === right.val && isSymmetricHelper(left.left, right.right) && isSymmetricHelper(left.right, right.left);\n}\n\nfunction isSymmetric(root: TreeNode | null): boolean {\n    if ( root == null || root.left === null && root.right === null) return true;\n\n    return isSymmetricHelper(root.left, root.right);\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"symmetric-tree","has_notes":false,"flag_type":1}