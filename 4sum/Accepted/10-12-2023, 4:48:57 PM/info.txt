{"id":1073525610,"lang":"typescript","lang_name":"TypeScript","time":"1 week, 4 days","timestamp":1697122137,"status":10,"status_display":"Accepted","runtime":"111 ms","url":"/submissions/detail/1073525610/","is_pending":"Not Pending","title":"4Sum","memory":"49.1 MB","code":"type tuples = [number, number, number, number];\n\nfunction toS(tuple: tuples): string {\n    return tuple.toString();\n}\n\nfunction T(t: tuples, nums: number[]): tuples {\n   return [nums[t[0]] , nums[t[1]] , nums[t[2]] , nums[t[3]]]\n}\n\nfunction toMultiset(s: number[]): Map<number, number> {\n    const s_mset: Map<number, number> = new Map();\n    for(let char of s) {\n        if(s_mset.has(char)) {\n            s_mset.set(char, s_mset.get(char)+1);\n        }else{\n            s_mset.set(char, 1);\n        }\n    }\n    return s_mset;\n}\n\nfunction restrictedList(nums: number[]): number[] {\n    let result = [];\n    let ms = toMultiset(nums);\n    for(let [num, count] of ms.entries()) {\n        for(let i=0; i< count && i < 4; i++) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n\nfunction inc(t: tuples, n: number) {\n    if(t[3] == n-1) {\n        if(t[2] == n-2) {\n            if(t[1]==n-3) {\n                t[0]++;\n                t[1] = t[0]+1;\n                t[2] = t[1]+1;\n                t[3] = t[2]+1;\n            }else{\n                t[1]++;\n                t[2] = t[1]+1;\n                t[3] = t[2]+1;\n            }\n        }else{\n            t[2]++;\n            t[3] = t[2]+1;\n        }\n    }else{\n        t[3]++;\n    }\n}\n\nfunction isTarget(nums: number[], t: tuples, n: number): boolean {\n    return n == (nums[t[0]] + nums[t[1]] + nums[t[2]] + nums[t[3]])\n}\n\nfunction lessThan(t: tuples, r: tuples): boolean {\n    // return t[0] < r[0] && t[1] <= r[1] && t[2] <= r[2] && t[3] <= r[3]\n    return t[0] < r[0]\n}\n\nfunction fourSum(nums: number[], target: number): number[][] {\n    const sort = (a,b) => a-b;\n    let mums = restrictedList(nums).sort(sort);\n    console.log(mums);\n    const end: tuples = [mums.length-3, mums.length-3, mums.length-2, mums.length-1]\n    let setOfTuples: Set<string> = new Set();\n    let result = [];\n    // let tuple: tuples = [0,1,2,3];\n    // while(lessThan(tuple, end)) {\n    //     let ts = toS(T(tuple, mums).sort(sort));\n    //     if(!setOfTuples.has(ts)) {\n    //         if(isTarget(mums, tuple, target)) {\n    //             setOfTuples.add(ts);\n    //             result.push(T(tuple, mums));\n    //         }\n    //     }\n    //     inc(tuple, mums.length);\n    //     //console.log(tuple)\n    // }\n    for(let i = 0; i < mums.length-3; i++) {\n        for(let j = i+1; j < mums.length-2; j++) {\n            let newTarget = target-mums[i]-mums[j];\n            let low = j+1, high = mums.length-1;\n            while(low < high) {\n                if(mums[low] + mums[high] < newTarget){\n                    low++;\n                } else if(mums[low] + mums[high] > newTarget){\n                    high--;\n                } else{\n                    result.push(T([i,j,low, high], mums));\n                    let tempIndex1 = low, tempIndex2 = high;\n                    while(low < high && mums[low] == mums[tempIndex1]) low++;\n                    while(low < high && mums[high] == mums[tempIndex2]) high--;\n                }\n            }\n            while(j+1 < mums.length && mums[j] == mums[j+1]) j++;\n\n        }\n        while(i+1 < mums.length && mums[i] == mums[i+1]) i++;\n    }\n    return result;\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"4sum","has_notes":false,"flag_type":1}