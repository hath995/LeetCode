{"id":1056398421,"lang":"typescript","lang_name":"TypeScript","time":"1Â month","timestamp":1695396407,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/1056398421/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"52 MB","code":"/**\n * Definition for a binary tree node.\n * class TreeNode {\n *     val: number\n *     left: TreeNode | null\n *     right: TreeNode | null\n *     constructor(val?: number, left?: TreeNode | null, right?: TreeNode | null) {\n *         this.val = (val===undefined ? 0 : val)\n *         this.left = (left===undefined ? null : left)\n *         this.right = (right===undefined ? null : right)\n *     }\n * }\n */\n\nfunction lowestCommonAncestor(root: TreeNode | null, p: TreeNode | null, q: TreeNode | null): TreeNode | null {\n\tif (root == null) return null;\n    \n    if(root == p) return p;\n\n    if(root == q) return q;\n\n    let leftBranch = lowestCommonAncestor(root.left, p, q);\n    let rightBranch = lowestCommonAncestor(root.right, p, q);\n    if(leftBranch !== null && rightBranch !== null) {\n        return root;\n    }\n    if(leftBranch) return leftBranch;\n    if(rightBranch) return rightBranch;\n\n    return null\t\n};","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false,"flag_type":1}