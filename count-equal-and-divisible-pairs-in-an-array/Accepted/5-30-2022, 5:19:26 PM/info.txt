{"id":710555369,"lang":"typescript","lang_name":"TypeScript","time":"1 year, 4 months","timestamp":1653923966,"status":10,"status_display":"Accepted","runtime":"130 ms","url":"/submissions/detail/710555369/","is_pending":"Not Pending","title":"Count Equal and Divisible Pairs in an Array","memory":"44.5 MB","code":"//function countPairs(nums: number[], k: number): number {\n//    let count = 0;\n//    for(let i = 0; i < nums.length-1; i++) {\n//        for(let j = i+1; j < nums.length; j++) {\n//            if(nums[i] == nums[j] && (i*j) % k == 0) {\n//                count++;\n//            }\n//            console.log(i, j, count);\n//        }\n//    }\n//    return count;\n//};\n\n//function countPairs(nums: number[], k: number): number {\n//    return countHelper(nums, k, 0 , 1);  \n//};\n\nfunction countPairs(nums: number[], k: number): number {\n    let result = 0;\n    for(let i = 0; i < nums.length; i++) {\n        result += countSeqSlice(nums, k, i, i+1);\n    }\n    return result;\n};\n\nfunction satPairs(nums: number[], k: number, a: number, b: number) {\n    return nums[a] == nums[b] && (a*b) % k == 0\n}\n\nfunction countHelper(nums: number[], k: number, start: number, stop: number): number {\n    if(!(k >0 )) {\n       throw new Error(\"K <= 0, k = \"+k)\n     }\n    if(!(start <= stop && start <= nums.length /*&& stop <= nums.length) */)) {\n        throw new Error(`indexes are out of bound ${start}, ${stop} >=? ${nums.length}`)\n    }\n    \n    if (start > stop || start == nums.length) {\n        return 0;\n    }else if(stop < nums.length) {\n        let result = satPairs(nums, k, start, stop) ? 1 + countHelper(nums, k, start, stop+1) : countHelper(nums, k, start, stop+1);\n        console.log(start, stop,  result);\n        return result\n    }else{\n        let result = countHelper(nums, k, start+1, start+2);\n        console.log(start, stop, result);\n        return  result\n    }\n}\n\nfunction countSeqSlice(nums: number[], k: number, start: number, stop: number): number {\n    if(start >= stop || stop >= nums.length) {\n        return 0;\n    }\n    return satPairs(nums, k, start, stop) ? 1 + countSeqSlice(nums, k, start, stop+1) : countSeqSlice(nums, k, start, stop+1);\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-equal-and-divisible-pairs-in-an-array","has_notes":false,"flag_type":1}